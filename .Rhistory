library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
istest <- segmentationOriginal$Case == 'Test'
test <- segmentationOriginal[istest,]
train <- segmentationOriginal[!istest,]
set.seed(125)
testing <- segmentationOriginal[istest,]
training <- segmentationOriginal[!istest,]
rm(test)
rm(train)
help("segmentationOriginal")
modelfit1 <- train(Class~.,
model = 'CART',
method = 'rpart'
)
modelfit1 <- train(Class~.,
model = 'CART',
method = 'rpart'
data = training
)
modelfit1 <- train(Class~.,
model = 'CART',
method = 'rpart',
data = training
)
modelfit1
modelfit1 <- train(Class~.,
model = 'CART',
method = 'rpart',
data = training
)
warnings()
library(ggplot2)
library(rpart)
modelfit1 <- train(Class~.,
method = 'rpart',
data = training
)
modelfit1
featurePlot(modelfit1)
plot(modelfit1)
plotClassProbs(modelfit1)
plot.train(modelfit1)
plot.train(modelfit1)
plot(modelfit1, uniform = TRUE)
summary(modelfit1)
qplot(modelfit1)
modelfit1$finalModel
plot(modelfit1$finalModel)
text(cartmodel$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
plot(modelfit1$finalModel, uniform=TRUE, main="Classification Tree")
text(modelfit1$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
source('~/.active-rstudio-document', echo=TRUE)
plot(modelfit1$finalModel, uniform=TRUE)
text(modelfit1$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
modelfit1 <- train(Class~.,
method = 'rpart',
data = training
)
plot(modelfit1$finalModel, uniform=TRUE)
text(modelfit1$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
text(modelfit1$finalModel, use.n = TRUE, all = TRUE, cex = 1)
0.8
plot(modelfit1$finalModel, uniform=TRUE)
text(modelfit1$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
qplot(modelfit1$finalModel)
text(modelfit1$finalModel)
modelfit1$modelInfo
modelfit1$finalModel
testing <- segmentationOriginal[istest,]
training <- segmentationOriginal[!istest,]
set.seed(125)
library(ggplot2)
library(rpart)
#fit to a CART model using the rpart
modelfit1 <- train(Class~.,
method = 'rpart',
data = training
)
modelfit1$finalModel
library(pgmm)
data("olive")
olive[,1]
col.names(olive[,1])
colnames(olive[,1])
colnames(olive
)
olive = olive[,-1]
model1 = train(Area~.,
data = olive,
method = 'ct'
)
model1 = train(Area~.,
data = olive,
method = 't'
)
model1 = train(Area~.,
data = olive,
method = 'tree'
)
method = 'CART'
model1 = train(Area~.,
data = olive,
method = 'CART'
)
install.packages(rattle)
install.packages('rattle')
model1 = train(Area~.,
data = olive,
method = 'rpart'
)
model1 = train(Area~.,
data = olive,
method = 'rpart'
)
library(rpart)
model1 = train(Area~.,
data = olive,
method = 'rpart'
)
model1
install.packages('rattle')
tree(model1)
newdata = as.data.frame(t(colMeans(olive)))
predict.train(model1, newdata = newdata)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#subset by Case column
istest <- segmentationOriginal$Case == 'Test'
testing <- segmentationOriginal[istest,]
training <- segmentationOriginal[!istest,]
set.seed(125)
library(ggplot2)
library(rpart)
#fit to a CART model using the rpart
modelfit1 <- train(Class~.,
method = 'rpart',
data = training
)
modelfit1$finalModel
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
rm(list = ls())
library(ElemStatLearn)
data(SAheart)
View(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
model1 = train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = 'glm', family = 'binomial'
)
model1 = train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = 'glm', family = binomial()
)
model1 = train(factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = 'glm', family = binomial()
)
missClass(testSA$chd, predict(model1, newdata = testSA))
SAheart$chd = as.integer(SAheart$chd)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model1 = train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = 'glm', family = binomial()
)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
missClass(testSA$chd, predict(model1, newdata = testSA))
confusionMatrix(model1)
missClass(testSA$chd, predict(model1, newdata = trainSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model1 = train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = 'glm', family = binomial()
)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
missClass(testSA$chd, predict(model1, newdata = testSA))
missClass(testSA$chd, predict(model1, newdata = trialSA))
missClass(testSA$chd, predict(model1, newdata = trainSA))
missClass(testSA$chd, predict(model1, testSA))
missClass(testSA$chd, predict(model1, trainSA))
missClass(trainSA$chd, predict(model1, trainSA))
missClass(testSA$chd, predict(model1, testSA))
missClass(trainSA$chd, predict(model1, trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
rm(list = ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.train)
model <- train(y ~ .,
data = vowel.train,
method = 'rf'
)
summary(model)
importance(model)
varImp(model)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
model <- train(y ~ .,
data = vowel.train,
method = 'rf'
)
summary(model)
varImp(model)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
model <- train(y ~ .,
data = vowel.train,
method = 'rf'
)
summary(model)
varImp(model)
res <- predict(modRF,vowel.test)
varImp(model)
res <- predict(model,vowel.test)
varImp(model)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
model <- train(y ~ .,
data = vowel.train,
method = 'rf'
)
summary(model)
res <- predict(model,vowel.test)
varImp(model)
install.packages('shiny')
install.packages('shiny')
library(shiny)
install.packages('shiny')
install.packages('shiny')
library(shiny)
runApp('Documents/shiny/tutorial')
runApp('Documents/shiny/tutorial')
runApp('Documents/shiny/tutorial')
runApp('Documents/shiny/tutorial')
runApp('Documents/shiny/tutorial')
runApp('github/Developing_Data_Products/Shiny_Part_2/app2')
?ifelse
runApp('github/Developing_Data_Products/Shiny_Part_2/app2')
runApp('github/Developing_Data_Products/Shiny_Part_2/app3')
runApp('github/Developing_Data_Products/Shiny_Part_2/app4')
installed.packages("miniUI")
instal.packages("miniUI")
install.packages("miniUI")
runGadget(ui, server)
source('~/Documents/shiny/gadget/gadget.r', echo=TRUE)
runGadget(ui, server)
source('~/Documents/shiny/gadget/gadget.r', echo=TRUE)
runApp()
runGadget()
runGadget("gadget.t")
runGadget("gadget.r")
runGadget("gadget.r", "gadget.r")
source('~/Documents/shiny/gadget/gadget.r', echo=TRUE)
View(myFirstGadget)
View(myFirstGadget)
myFirstGadget()
source('~/Documents/shiny/gadget/gadget.r', echo=TRUE)
source('~/Documents/shiny/gadget/gadget.r', echo=TRUE)
x <- c(1, 2, 4, 5, 6)
y <- c(600, 3, 26345, 194142)
multipy_numbers(x, y)
y <- c(600, 3, 26345, 194142)
multipy_numbers(x, y)
source('~/Documents/shiny/gadget/gadget.r', echo=TRUE)
pickTrees()
test <- pickTrees()
install.packages("googleVis")
installed.packages("plotly")
install.packages("plotly")
install.packages("plotly")
update.packages(ggplot2)
update.packages("ggplot2")
install.packages("plotly")
update.packages()
library(plotly)
install.packages("plotly")
library(plotly)
plot_ly()
library(ggplot2)
update.packages()
library(ggplot2)
update(ggplot2)
old.packages()
update.packages()
install.packages("rccp")
install.packages("Rccp")
install.packages('rccp')
install.packages('Rccp')
source('~/.active-rstudio-document', echo=TRUE)
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
library(shiny)
## Only run examples in interactive R sessions
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
runApp('github/drug-spending/R-shiny')
runApp('github/drug-spending/R-shiny')
runApp('github/drug-spending/R-shiny')
runApp('github/drug-spending/R-shiny')
runApp('github/drug-spending/R-shiny')
runApp('github/drug-spending/R-shiny')
runApp('github/drug-spending/R-shiny')
runApp('github/drug-spending/R-shiny')
runApp('github/drug-spending/R-shiny')
runApp('github/drug-spending/R-shiny')
runApp('github/drug-spending/R-shiny')
library(plotly)
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, color = ~carat,
size = ~carat, text = ~paste("Clarity: ", clarity))
setwd("~/github/presentation")
